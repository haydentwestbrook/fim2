// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  role      Role     @default(PLAYER)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdPages Page[]
  assignments  UserPageAssignment[]
  sessions     Session[]

  @@map("users")
}

model Page {
  id          Int      @id @default(autoincrement())
  title       String
  url         String @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdById Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  createdBy   User                 @relation(fields: [createdById], references: [id])
  assignments UserPageAssignment[]

  @@map("pages")
}

model UserPageAssignment {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  pageId     Int      @map("page_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy Int?     @map("assigned_by")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@map("user_page_assignments")
}

model Session {
  id        String   @id @default(cuid())
  userId    Int      @map("user_id")
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

enum Role {
  ADMIN
  PLAYER
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
